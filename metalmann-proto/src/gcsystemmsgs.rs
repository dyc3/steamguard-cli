// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gcsystemmsgs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GamePersonalDataCategoryInfo {
    // message fields
    field_type: ::protobuf::SingularField<::std::string::String>,
    localization_token: ::protobuf::SingularField<::std::string::String>,
    template_file: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GamePersonalDataCategoryInfo {
    fn default() -> &'a CCommunity_GamePersonalDataCategoryInfo {
        <CCommunity_GamePersonalDataCategoryInfo as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GamePersonalDataCategoryInfo {
    pub fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;


    pub fn get_field_type(&self) -> &str {
        match self.field_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        self.field_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string localization_token = 2;


    pub fn get_localization_token(&self) -> &str {
        match self.localization_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_localization_token(&mut self) {
        self.localization_token.clear();
    }

    pub fn has_localization_token(&self) -> bool {
        self.localization_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localization_token(&mut self, v: ::std::string::String) {
        self.localization_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localization_token(&mut self) -> &mut ::std::string::String {
        if self.localization_token.is_none() {
            self.localization_token.set_default();
        }
        self.localization_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_localization_token(&mut self) -> ::std::string::String {
        self.localization_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string template_file = 3;


    pub fn get_template_file(&self) -> &str {
        match self.template_file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_template_file(&mut self) {
        self.template_file.clear();
    }

    pub fn has_template_file(&self) -> bool {
        self.template_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template_file(&mut self, v: ::std::string::String) {
        self.template_file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template_file(&mut self) -> &mut ::std::string::String {
        if self.template_file.is_none() {
            self.template_file.set_default();
        }
        self.template_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_template_file(&mut self) -> ::std::string::String {
        self.template_file.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GamePersonalDataCategoryInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.localization_token)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.template_file)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_type.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.localization_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.template_file.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.localization_token.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.template_file.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        CCommunity_GamePersonalDataCategoryInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.field_type },
                |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localization_token",
                |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.localization_token },
                |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.localization_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "template_file",
                |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.template_file },
                |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.template_file },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GamePersonalDataCategoryInfo>(
                "CCommunity_GamePersonalDataCategoryInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GamePersonalDataCategoryInfo {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GamePersonalDataCategoryInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GamePersonalDataCategoryInfo::new)
    }
}

impl ::protobuf::Clear for CCommunity_GamePersonalDataCategoryInfo {
    fn clear(&mut self) {
        self.field_type.clear();
        self.localization_token.clear();
        self.template_file.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GamePersonalDataCategoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GamePersonalDataCategoryInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataCategories_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Request {
        <CCommunity_GetGamePersonalDataCategories_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        CCommunity_GetGamePersonalDataCategories_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCommunity_GetGamePersonalDataCategories_Request| { &m.appid },
                |m: &mut CCommunity_GetGamePersonalDataCategories_Request| { &mut m.appid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataCategories_Request>(
                "CCommunity_GetGamePersonalDataCategories_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataCategories_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataCategories_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataCategories_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataCategories_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataCategories_Response {
    // message fields
    pub categories: ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo>,
    app_assets_basename: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Response {
        <CCommunity_GetGamePersonalDataCategories_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        ::std::default::Default::default()
    }

    // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;


    pub fn get_categories(&self) -> &[CCommunity_GamePersonalDataCategoryInfo] {
        &self.categories
    }
    pub fn clear_categories(&mut self) {
        self.categories.clear();
    }

    // Param is passed by value, moved
    pub fn set_categories(&mut self, v: ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo>) {
        self.categories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_categories(&mut self) -> &mut ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo> {
        &mut self.categories
    }

    // Take field
    pub fn take_categories(&mut self) -> ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo> {
        ::std::mem::replace(&mut self.categories, ::protobuf::RepeatedField::new())
    }

    // optional string app_assets_basename = 2;


    pub fn get_app_assets_basename(&self) -> &str {
        match self.app_assets_basename.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_app_assets_basename(&mut self) {
        self.app_assets_basename.clear();
    }

    pub fn has_app_assets_basename(&self) -> bool {
        self.app_assets_basename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_assets_basename(&mut self, v: ::std::string::String) {
        self.app_assets_basename = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_assets_basename(&mut self) -> &mut ::std::string::String {
        if self.app_assets_basename.is_none() {
            self.app_assets_basename.set_default();
        }
        self.app_assets_basename.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_assets_basename(&mut self) -> ::std::string::String {
        self.app_assets_basename.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.categories {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.categories)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.app_assets_basename)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.categories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.app_assets_basename.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.categories {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.app_assets_basename.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        CCommunity_GetGamePersonalDataCategories_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CCommunity_GamePersonalDataCategoryInfo>>(
                "categories",
                |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.categories },
                |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.categories },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app_assets_basename",
                |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.app_assets_basename },
                |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.app_assets_basename },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataCategories_Response>(
                "CCommunity_GetGamePersonalDataCategories_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataCategories_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataCategories_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataCategories_Response {
    fn clear(&mut self) {
        self.categories.clear();
        self.app_assets_basename.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataCategories_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataEntries_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    steamid: ::std::option::Option<u64>,
    field_type: ::protobuf::SingularField<::std::string::String>,
    continue_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Request {
        <CCommunity_GetGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string type = 3;


    pub fn get_field_type(&self) -> &str {
        match self.field_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        self.field_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string continue_token = 4;


    pub fn get_continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_continue_token(&mut self) {
        self.continue_token.clear();
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token.set_default();
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.continue_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.continue_token.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        CCommunity_GetGamePersonalDataEntries_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.appid },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "steamid",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.steamid },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.field_type },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "continue_token",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.continue_token },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.continue_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataEntries_Request>(
                "CCommunity_GetGamePersonalDataEntries_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataEntries_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataEntries_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataEntries_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.field_type.clear();
        self.continue_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataEntries_Response {
    // message fields
    gceresult: ::std::option::Option<u32>,
    pub entries: ::protobuf::RepeatedField<::std::string::String>,
    continue_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Response {
        <CCommunity_GetGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;


    pub fn get_gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }
    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }

    // repeated string entries = 2;


    pub fn get_entries(&self) -> &[::std::string::String] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // optional string continue_token = 3;


    pub fn get_continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_continue_token(&mut self) {
        self.continue_token.clear();
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token.set_default();
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gceresult = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.entries)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.continue_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entries {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        for v in &self.entries {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.continue_token.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        CCommunity_GetGamePersonalDataEntries_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gceresult",
                |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.gceresult },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.gceresult },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entries",
                |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.entries },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "continue_token",
                |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.continue_token },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.continue_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataEntries_Response>(
                "CCommunity_GetGamePersonalDataEntries_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataEntries_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataEntries_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataEntries_Response {
    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.entries.clear();
        self.continue_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Request {
        <CCommunity_TerminateGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        CCommunity_TerminateGamePersonalDataEntries_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.appid },
                |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "steamid",
                |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.steamid },
                |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.steamid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_TerminateGamePersonalDataEntries_Request>(
                "CCommunity_TerminateGamePersonalDataEntries_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_TerminateGamePersonalDataEntries_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_TerminateGamePersonalDataEntries_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Response {
    // message fields
    gceresult: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Response {
        <CCommunity_TerminateGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;


    pub fn get_gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }
    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gceresult = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        CCommunity_TerminateGamePersonalDataEntries_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gceresult",
                |m: &CCommunity_TerminateGamePersonalDataEntries_Response| { &m.gceresult },
                |m: &mut CCommunity_TerminateGamePersonalDataEntries_Response| { &mut m.gceresult },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_TerminateGamePersonalDataEntries_Response>(
                "CCommunity_TerminateGamePersonalDataEntries_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_TerminateGamePersonalDataEntries_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_TerminateGamePersonalDataEntries_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EGCSystemMsg {
    k_EGCMsgInvalid = 0,
    k_EGCMsgMulti = 1,
    k_EGCMsgGenericReply = 10,
    k_EGCMsgSystemBase = 50,
    k_EGCMsgAchievementAwarded = 51,
    k_EGCMsgConCommand = 52,
    k_EGCMsgStartPlaying = 53,
    k_EGCMsgStopPlaying = 54,
    k_EGCMsgStartGameserver = 55,
    k_EGCMsgStopGameserver = 56,
    k_EGCMsgWGRequest = 57,
    k_EGCMsgWGResponse = 58,
    k_EGCMsgGetUserGameStatsSchema = 59,
    k_EGCMsgGetUserGameStatsSchemaResponse = 60,
    k_EGCMsgGetUserStatsDEPRECATED = 61,
    k_EGCMsgGetUserStatsResponse = 62,
    k_EGCMsgAppInfoUpdated = 63,
    k_EGCMsgValidateSession = 64,
    k_EGCMsgValidateSessionResponse = 65,
    k_EGCMsgLookupAccountFromInput = 66,
    k_EGCMsgSendHTTPRequest = 67,
    k_EGCMsgSendHTTPRequestResponse = 68,
    k_EGCMsgPreTestSetup = 69,
    k_EGCMsgRecordSupportAction = 70,
    k_EGCMsgGetAccountDetails_DEPRECATED = 71,
    k_EGCMsgReceiveInterAppMessage = 73,
    k_EGCMsgFindAccounts = 74,
    k_EGCMsgPostAlert = 75,
    k_EGCMsgGetLicenses = 76,
    k_EGCMsgGetUserStats = 77,
    k_EGCMsgGetCommands = 78,
    k_EGCMsgGetCommandsResponse = 79,
    k_EGCMsgAddFreeLicense = 80,
    k_EGCMsgAddFreeLicenseResponse = 81,
    k_EGCMsgGetIPLocation = 82,
    k_EGCMsgGetIPLocationResponse = 83,
    k_EGCMsgSystemStatsSchema = 84,
    k_EGCMsgGetSystemStats = 85,
    k_EGCMsgGetSystemStatsResponse = 86,
    k_EGCMsgSendEmail = 87,
    k_EGCMsgSendEmailResponse = 88,
    k_EGCMsgGetEmailTemplate = 89,
    k_EGCMsgGetEmailTemplateResponse = 90,
    k_EGCMsgGrantGuestPass = 91,
    k_EGCMsgGrantGuestPassResponse = 92,
    k_EGCMsgGetAccountDetails = 93,
    k_EGCMsgGetAccountDetailsResponse = 94,
    k_EGCMsgGetPersonaNames = 95,
    k_EGCMsgGetPersonaNamesResponse = 96,
    k_EGCMsgMultiplexMsg = 97,
    k_EGCMsgWebAPIRegisterInterfaces = 101,
    k_EGCMsgWebAPIJobRequest = 102,
    k_EGCMsgWebAPIJobRequestHttpResponse = 104,
    k_EGCMsgWebAPIJobRequestForwardResponse = 105,
    k_EGCMsgMemCachedGet = 200,
    k_EGCMsgMemCachedGetResponse = 201,
    k_EGCMsgMemCachedSet = 202,
    k_EGCMsgMemCachedDelete = 203,
    k_EGCMsgMemCachedStats = 204,
    k_EGCMsgMemCachedStatsResponse = 205,
    k_EGCMsgSQLStats = 210,
    k_EGCMsgSQLStatsResponse = 211,
    k_EGCMsgMasterSetDirectory = 220,
    k_EGCMsgMasterSetDirectoryResponse = 221,
    k_EGCMsgMasterSetWebAPIRouting = 222,
    k_EGCMsgMasterSetWebAPIRoutingResponse = 223,
    k_EGCMsgMasterSetClientMsgRouting = 224,
    k_EGCMsgMasterSetClientMsgRoutingResponse = 225,
    k_EGCMsgSetOptions = 226,
    k_EGCMsgSetOptionsResponse = 227,
    k_EGCMsgSystemBase2 = 500,
    k_EGCMsgGetPurchaseTrustStatus = 501,
    k_EGCMsgGetPurchaseTrustStatusResponse = 502,
    k_EGCMsgUpdateSession = 503,
    k_EGCMsgGCAccountVacStatusChange = 504,
    k_EGCMsgCheckFriendship = 505,
    k_EGCMsgCheckFriendshipResponse = 506,
    k_EGCMsgGetPartnerAccountLink = 507,
    k_EGCMsgGetPartnerAccountLinkResponse = 508,
    k_EGCMsgVSReportedSuspiciousActivity = 509,
    k_EGCMsgAccountTradeBanStatusChange = 510,
    k_EGCMsgAccountLockStatusChange = 511,
    k_EGCMsgDPPartnerMicroTxns = 512,
    k_EGCMsgDPPartnerMicroTxnsResponse = 513,
    k_EGCMsgGetIPASN = 514,
    k_EGCMsgGetIPASNResponse = 515,
    k_EGCMsgGetAppFriendsList = 516,
    k_EGCMsgGetAppFriendsListResponse = 517,
    k_EGCMsgVacVerificationChange = 518,
    k_EGCMsgAccountPhoneNumberChange = 519,
    k_EGCMsgAccountTwoFactorChange = 520,
    k_EGCMsgCheckClanMembership = 521,
    k_EGCMsgCheckClanMembershipResponse = 522,
    k_EGCMsgInviteUserToLobby = 523,
    k_EGCMsgGetGamePersonalDataCategoriesRequest = 524,
    k_EGCMsgGetGamePersonalDataCategoriesResponse = 525,
    k_EGCMsgGetGamePersonalDataEntriesRequest = 526,
    k_EGCMsgGetGamePersonalDataEntriesResponse = 527,
    k_EGCMsgTerminateGamePersonalDataEntriesRequest = 528,
    k_EGCMsgTerminateGamePersonalDataEntriesResponse = 529,
}

impl ::protobuf::ProtobufEnum for EGCSystemMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCSystemMsg> {
        match value {
            0 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            1 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            10 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            50 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            51 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            52 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            53 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            54 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            55 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            56 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            57 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            58 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            59 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            60 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            61 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            62 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            63 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            64 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            65 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            66 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            67 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            68 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            69 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            70 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            71 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            73 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            74 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            75 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            76 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            77 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            78 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            79 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            80 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            81 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            82 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            83 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            84 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            85 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            86 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            87 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            88 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            89 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            90 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            91 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            92 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            93 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            94 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            95 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            96 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            97 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            101 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            102 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            104 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            105 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            200 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            201 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            202 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            203 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            204 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            205 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            210 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStats),
            211 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStatsResponse),
            220 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            221 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            222 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            223 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            224 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            225 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            226 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            227 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            500 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            501 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            502 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            503 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            504 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            505 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            506 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            507 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            508 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            509 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity),
            510 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange),
            511 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountLockStatusChange),
            512 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            513 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            514 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASN),
            515 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASNResponse),
            516 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsList),
            517 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse),
            518 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            519 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            520 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTwoFactorChange),
            521 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembership),
            522 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse),
            523 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            524 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            525 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            526 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            527 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            528 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            529 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EGCSystemMsg] = &[
            EGCSystemMsg::k_EGCMsgInvalid,
            EGCSystemMsg::k_EGCMsgMulti,
            EGCSystemMsg::k_EGCMsgGenericReply,
            EGCSystemMsg::k_EGCMsgSystemBase,
            EGCSystemMsg::k_EGCMsgAchievementAwarded,
            EGCSystemMsg::k_EGCMsgConCommand,
            EGCSystemMsg::k_EGCMsgStartPlaying,
            EGCSystemMsg::k_EGCMsgStopPlaying,
            EGCSystemMsg::k_EGCMsgStartGameserver,
            EGCSystemMsg::k_EGCMsgStopGameserver,
            EGCSystemMsg::k_EGCMsgWGRequest,
            EGCSystemMsg::k_EGCMsgWGResponse,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse,
            EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED,
            EGCSystemMsg::k_EGCMsgGetUserStatsResponse,
            EGCSystemMsg::k_EGCMsgAppInfoUpdated,
            EGCSystemMsg::k_EGCMsgValidateSession,
            EGCSystemMsg::k_EGCMsgValidateSessionResponse,
            EGCSystemMsg::k_EGCMsgLookupAccountFromInput,
            EGCSystemMsg::k_EGCMsgSendHTTPRequest,
            EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse,
            EGCSystemMsg::k_EGCMsgPreTestSetup,
            EGCSystemMsg::k_EGCMsgRecordSupportAction,
            EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED,
            EGCSystemMsg::k_EGCMsgReceiveInterAppMessage,
            EGCSystemMsg::k_EGCMsgFindAccounts,
            EGCSystemMsg::k_EGCMsgPostAlert,
            EGCSystemMsg::k_EGCMsgGetLicenses,
            EGCSystemMsg::k_EGCMsgGetUserStats,
            EGCSystemMsg::k_EGCMsgGetCommands,
            EGCSystemMsg::k_EGCMsgGetCommandsResponse,
            EGCSystemMsg::k_EGCMsgAddFreeLicense,
            EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse,
            EGCSystemMsg::k_EGCMsgGetIPLocation,
            EGCSystemMsg::k_EGCMsgGetIPLocationResponse,
            EGCSystemMsg::k_EGCMsgSystemStatsSchema,
            EGCSystemMsg::k_EGCMsgGetSystemStats,
            EGCSystemMsg::k_EGCMsgGetSystemStatsResponse,
            EGCSystemMsg::k_EGCMsgSendEmail,
            EGCSystemMsg::k_EGCMsgSendEmailResponse,
            EGCSystemMsg::k_EGCMsgGetEmailTemplate,
            EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse,
            EGCSystemMsg::k_EGCMsgGrantGuestPass,
            EGCSystemMsg::k_EGCMsgGrantGuestPassResponse,
            EGCSystemMsg::k_EGCMsgGetAccountDetails,
            EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse,
            EGCSystemMsg::k_EGCMsgGetPersonaNames,
            EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse,
            EGCSystemMsg::k_EGCMsgMultiplexMsg,
            EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequest,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse,
            EGCSystemMsg::k_EGCMsgMemCachedGet,
            EGCSystemMsg::k_EGCMsgMemCachedGetResponse,
            EGCSystemMsg::k_EGCMsgMemCachedSet,
            EGCSystemMsg::k_EGCMsgMemCachedDelete,
            EGCSystemMsg::k_EGCMsgMemCachedStats,
            EGCSystemMsg::k_EGCMsgMemCachedStatsResponse,
            EGCSystemMsg::k_EGCMsgSQLStats,
            EGCSystemMsg::k_EGCMsgSQLStatsResponse,
            EGCSystemMsg::k_EGCMsgMasterSetDirectory,
            EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse,
            EGCSystemMsg::k_EGCMsgSetOptions,
            EGCSystemMsg::k_EGCMsgSetOptionsResponse,
            EGCSystemMsg::k_EGCMsgSystemBase2,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse,
            EGCSystemMsg::k_EGCMsgUpdateSession,
            EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange,
            EGCSystemMsg::k_EGCMsgCheckFriendship,
            EGCSystemMsg::k_EGCMsgCheckFriendshipResponse,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLink,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse,
            EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity,
            EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange,
            EGCSystemMsg::k_EGCMsgAccountLockStatusChange,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse,
            EGCSystemMsg::k_EGCMsgGetIPASN,
            EGCSystemMsg::k_EGCMsgGetIPASNResponse,
            EGCSystemMsg::k_EGCMsgGetAppFriendsList,
            EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse,
            EGCSystemMsg::k_EGCMsgVacVerificationChange,
            EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange,
            EGCSystemMsg::k_EGCMsgAccountTwoFactorChange,
            EGCSystemMsg::k_EGCMsgCheckClanMembership,
            EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse,
            EGCSystemMsg::k_EGCMsgInviteUserToLobby,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EGCSystemMsg>("EGCSystemMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EGCSystemMsg {
}

impl ::std::default::Default for EGCSystemMsg {
    fn default() -> Self {
        EGCSystemMsg::k_EGCMsgInvalid
    }
}

impl ::protobuf::reflect::ProtobufValue for EGCSystemMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ESOMsg {
    k_ESOMsg_Create = 21,
    k_ESOMsg_Update = 22,
    k_ESOMsg_Destroy = 23,
    k_ESOMsg_CacheSubscribed = 24,
    k_ESOMsg_CacheUnsubscribed = 25,
    k_ESOMsg_UpdateMultiple = 26,
    k_ESOMsg_CacheSubscriptionCheck = 27,
    k_ESOMsg_CacheSubscriptionRefresh = 28,
    k_ESOMsg_CacheSubscribedUpToDate = 29,
}

impl ::protobuf::ProtobufEnum for ESOMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESOMsg> {
        match value {
            21 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            22 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            23 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            24 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            25 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            26 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            27 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            28 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            29 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribedUpToDate),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ESOMsg] = &[
            ESOMsg::k_ESOMsg_Create,
            ESOMsg::k_ESOMsg_Update,
            ESOMsg::k_ESOMsg_Destroy,
            ESOMsg::k_ESOMsg_CacheSubscribed,
            ESOMsg::k_ESOMsg_CacheUnsubscribed,
            ESOMsg::k_ESOMsg_UpdateMultiple,
            ESOMsg::k_ESOMsg_CacheSubscriptionCheck,
            ESOMsg::k_ESOMsg_CacheSubscriptionRefresh,
            ESOMsg::k_ESOMsg_CacheSubscribedUpToDate,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ESOMsg>("ESOMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ESOMsg {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ESOMsg {
    fn default() -> Self {
        ESOMsg::k_ESOMsg_Create
    }
}

impl ::protobuf::reflect::ProtobufValue for ESOMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EGCBaseClientMsg {
    k_EMsgGCPingRequest = 3001,
    k_EMsgGCPingResponse = 3002,
    k_EMsgGCClientWelcome = 4004,
    k_EMsgGCServerWelcome = 4005,
    k_EMsgGCClientHello = 4006,
    k_EMsgGCServerHello = 4007,
    k_EMsgGCClientGoodbye = 4008,
    k_EMsgGCServerGoodbye = 4009,
}

impl ::protobuf::ProtobufEnum for EGCBaseClientMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCBaseClientMsg> {
        match value {
            3001 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingRequest),
            3002 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingResponse),
            4004 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            4005 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            4006 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            4007 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            4008 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientGoodbye),
            4009 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerGoodbye),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EGCBaseClientMsg] = &[
            EGCBaseClientMsg::k_EMsgGCPingRequest,
            EGCBaseClientMsg::k_EMsgGCPingResponse,
            EGCBaseClientMsg::k_EMsgGCClientWelcome,
            EGCBaseClientMsg::k_EMsgGCServerWelcome,
            EGCBaseClientMsg::k_EMsgGCClientHello,
            EGCBaseClientMsg::k_EMsgGCServerHello,
            EGCBaseClientMsg::k_EMsgGCClientGoodbye,
            EGCBaseClientMsg::k_EMsgGCServerGoodbye,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EGCBaseClientMsg>("EGCBaseClientMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EGCBaseClientMsg {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCBaseClientMsg {
    fn default() -> Self {
        EGCBaseClientMsg::k_EMsgGCPingRequest
    }
}

impl ::protobuf::reflect::ProtobufValue for EGCBaseClientMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EGCToGCMsg {
    k_EGCToGCMsgMasterAck = 150,
    k_EGCToGCMsgMasterAckResponse = 151,
    k_EGCToGCMsgRouted = 152,
    k_EGCToGCMsgRoutedReply = 153,
    k_EMsgGCUpdateSubGCSessionInfo = 154,
    k_EMsgGCRequestSubGCSessionInfo = 155,
    k_EMsgGCRequestSubGCSessionInfoResponse = 156,
    k_EGCToGCMsgMasterStartupComplete = 157,
    k_EMsgGCToGCSOCacheSubscribe = 158,
    k_EMsgGCToGCSOCacheUnsubscribe = 159,
}

impl ::protobuf::ProtobufEnum for EGCToGCMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCToGCMsg> {
        match value {
            150 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            151 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            152 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            153 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            154 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo),
            155 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo),
            156 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse),
            157 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            158 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe),
            159 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EGCToGCMsg] = &[
            EGCToGCMsg::k_EGCToGCMsgMasterAck,
            EGCToGCMsg::k_EGCToGCMsgMasterAckResponse,
            EGCToGCMsg::k_EGCToGCMsgRouted,
            EGCToGCMsg::k_EGCToGCMsgRoutedReply,
            EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo,
            EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo,
            EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse,
            EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete,
            EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe,
            EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EGCToGCMsg>("EGCToGCMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EGCToGCMsg {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCToGCMsg {
    fn default() -> Self {
        EGCToGCMsg::k_EGCToGCMsgMasterAck
    }
}

impl ::protobuf::reflect::ProtobufValue for EGCToGCMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12gcsystemmsgs.proto\"\x91\x01\n'CCommunity_GamePersonalDataCategory\
    Info\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12-\n\x12localizatio\
    n_token\x18\x02\x20\x01(\tR\x11localizationToken\x12#\n\rtemplate_file\
    \x18\x03\x20\x01(\tR\x0ctemplateFile\"H\n0CCommunity_GetGamePersonalData\
    Categories_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\"\xad\
    \x01\n1CCommunity_GetGamePersonalDataCategories_Response\x12H\n\ncategor\
    ies\x18\x01\x20\x03(\x0b2(.CCommunity_GamePersonalDataCategoryInfoR\ncat\
    egories\x12.\n\x13app_assets_basename\x18\x02\x20\x01(\tR\x11appAssetsBa\
    sename\"\x9a\x01\n-CCommunity_GetGamePersonalDataEntries_Request\x12\x14\
    \n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07steamid\x18\x02\
    \x20\x01(\x04R\x07steamid\x12\x12\n\x04type\x18\x03\x20\x01(\tR\x04type\
    \x12%\n\x0econtinue_token\x18\x04\x20\x01(\tR\rcontinueToken\"\x8f\x01\n\
    .CCommunity_GetGamePersonalDataEntries_Response\x12\x1c\n\tgceresult\x18\
    \x01\x20\x01(\rR\tgceresult\x12\x18\n\x07entries\x18\x02\x20\x03(\tR\x07\
    entries\x12%\n\x0econtinue_token\x18\x03\x20\x01(\tR\rcontinueToken\"e\n\
    3CCommunity_TerminateGamePersonalDataEntries_Request\x12\x14\n\x05appid\
    \x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07steamid\x18\x02\x20\x01(\x04R\
    \x07steamid\"T\n4CCommunity_TerminateGamePersonalDataEntries_Response\
    \x12\x1c\n\tgceresult\x18\x01\x20\x01(\rR\tgceresult*\xc4\x1a\n\x0cEGCSy\
    stemMsg\x12\x13\n\x0fk_EGCMsgInvalid\x10\0\x12\x11\n\rk_EGCMsgMulti\x10\
    \x01\x12\x18\n\x14k_EGCMsgGenericReply\x10\n\x12\x16\n\x12k_EGCMsgSystem\
    Base\x102\x12\x1e\n\x1ak_EGCMsgAchievementAwarded\x103\x12\x16\n\x12k_EG\
    CMsgConCommand\x104\x12\x18\n\x14k_EGCMsgStartPlaying\x105\x12\x17\n\x13\
    k_EGCMsgStopPlaying\x106\x12\x1b\n\x17k_EGCMsgStartGameserver\x107\x12\
    \x1a\n\x16k_EGCMsgStopGameserver\x108\x12\x15\n\x11k_EGCMsgWGRequest\x10\
    9\x12\x16\n\x12k_EGCMsgWGResponse\x10:\x12\"\n\x1ek_EGCMsgGetUserGameSta\
    tsSchema\x10;\x12*\n&k_EGCMsgGetUserGameStatsSchemaResponse\x10<\x12\"\n\
    \x1ek_EGCMsgGetUserStatsDEPRECATED\x10=\x12\x20\n\x1ck_EGCMsgGetUserStat\
    sResponse\x10>\x12\x1a\n\x16k_EGCMsgAppInfoUpdated\x10?\x12\x1b\n\x17k_E\
    GCMsgValidateSession\x10@\x12#\n\x1fk_EGCMsgValidateSessionResponse\x10A\
    \x12\"\n\x1ek_EGCMsgLookupAccountFromInput\x10B\x12\x1b\n\x17k_EGCMsgSen\
    dHTTPRequest\x10C\x12#\n\x1fk_EGCMsgSendHTTPRequestResponse\x10D\x12\x18\
    \n\x14k_EGCMsgPreTestSetup\x10E\x12\x1f\n\x1bk_EGCMsgRecordSupportAction\
    \x10F\x12(\n$k_EGCMsgGetAccountDetails_DEPRECATED\x10G\x12\"\n\x1ek_EGCM\
    sgReceiveInterAppMessage\x10I\x12\x18\n\x14k_EGCMsgFindAccounts\x10J\x12\
    \x15\n\x11k_EGCMsgPostAlert\x10K\x12\x17\n\x13k_EGCMsgGetLicenses\x10L\
    \x12\x18\n\x14k_EGCMsgGetUserStats\x10M\x12\x17\n\x13k_EGCMsgGetCommands\
    \x10N\x12\x1f\n\x1bk_EGCMsgGetCommandsResponse\x10O\x12\x1a\n\x16k_EGCMs\
    gAddFreeLicense\x10P\x12\"\n\x1ek_EGCMsgAddFreeLicenseResponse\x10Q\x12\
    \x19\n\x15k_EGCMsgGetIPLocation\x10R\x12!\n\x1dk_EGCMsgGetIPLocationResp\
    onse\x10S\x12\x1d\n\x19k_EGCMsgSystemStatsSchema\x10T\x12\x1a\n\x16k_EGC\
    MsgGetSystemStats\x10U\x12\"\n\x1ek_EGCMsgGetSystemStatsResponse\x10V\
    \x12\x15\n\x11k_EGCMsgSendEmail\x10W\x12\x1d\n\x19k_EGCMsgSendEmailRespo\
    nse\x10X\x12\x1c\n\x18k_EGCMsgGetEmailTemplate\x10Y\x12$\n\x20k_EGCMsgGe\
    tEmailTemplateResponse\x10Z\x12\x1a\n\x16k_EGCMsgGrantGuestPass\x10[\x12\
    \"\n\x1ek_EGCMsgGrantGuestPassResponse\x10\\\x12\x1d\n\x19k_EGCMsgGetAcc\
    ountDetails\x10]\x12%\n!k_EGCMsgGetAccountDetailsResponse\x10^\x12\x1b\n\
    \x17k_EGCMsgGetPersonaNames\x10_\x12#\n\x1fk_EGCMsgGetPersonaNamesRespon\
    se\x10`\x12\x18\n\x14k_EGCMsgMultiplexMsg\x10a\x12$\n\x20k_EGCMsgWebAPIR\
    egisterInterfaces\x10e\x12\x1c\n\x18k_EGCMsgWebAPIJobRequest\x10f\x12(\n\
    $k_EGCMsgWebAPIJobRequestHttpResponse\x10h\x12+\n'k_EGCMsgWebAPIJobReque\
    stForwardResponse\x10i\x12\x19\n\x14k_EGCMsgMemCachedGet\x10\xc8\x01\x12\
    !\n\x1ck_EGCMsgMemCachedGetResponse\x10\xc9\x01\x12\x19\n\x14k_EGCMsgMem\
    CachedSet\x10\xca\x01\x12\x1c\n\x17k_EGCMsgMemCachedDelete\x10\xcb\x01\
    \x12\x1b\n\x16k_EGCMsgMemCachedStats\x10\xcc\x01\x12#\n\x1ek_EGCMsgMemCa\
    chedStatsResponse\x10\xcd\x01\x12\x15\n\x10k_EGCMsgSQLStats\x10\xd2\x01\
    \x12\x1d\n\x18k_EGCMsgSQLStatsResponse\x10\xd3\x01\x12\x1f\n\x1ak_EGCMsg\
    MasterSetDirectory\x10\xdc\x01\x12'\n\"k_EGCMsgMasterSetDirectoryRespons\
    e\x10\xdd\x01\x12#\n\x1ek_EGCMsgMasterSetWebAPIRouting\x10\xde\x01\x12+\
    \n&k_EGCMsgMasterSetWebAPIRoutingResponse\x10\xdf\x01\x12&\n!k_EGCMsgMas\
    terSetClientMsgRouting\x10\xe0\x01\x12.\n)k_EGCMsgMasterSetClientMsgRout\
    ingResponse\x10\xe1\x01\x12\x17\n\x12k_EGCMsgSetOptions\x10\xe2\x01\x12\
    \x1f\n\x1ak_EGCMsgSetOptionsResponse\x10\xe3\x01\x12\x18\n\x13k_EGCMsgSy\
    stemBase2\x10\xf4\x03\x12#\n\x1ek_EGCMsgGetPurchaseTrustStatus\x10\xf5\
    \x03\x12+\n&k_EGCMsgGetPurchaseTrustStatusResponse\x10\xf6\x03\x12\x1a\n\
    \x15k_EGCMsgUpdateSession\x10\xf7\x03\x12%\n\x20k_EGCMsgGCAccountVacStat\
    usChange\x10\xf8\x03\x12\x1c\n\x17k_EGCMsgCheckFriendship\x10\xf9\x03\
    \x12$\n\x1fk_EGCMsgCheckFriendshipResponse\x10\xfa\x03\x12\"\n\x1dk_EGCM\
    sgGetPartnerAccountLink\x10\xfb\x03\x12*\n%k_EGCMsgGetPartnerAccountLink\
    Response\x10\xfc\x03\x12)\n$k_EGCMsgVSReportedSuspiciousActivity\x10\xfd\
    \x03\x12(\n#k_EGCMsgAccountTradeBanStatusChange\x10\xfe\x03\x12$\n\x1fk_\
    EGCMsgAccountLockStatusChange\x10\xff\x03\x12\x1f\n\x1ak_EGCMsgDPPartner\
    MicroTxns\x10\x80\x04\x12'\n\"k_EGCMsgDPPartnerMicroTxnsResponse\x10\x81\
    \x04\x12\x15\n\x10k_EGCMsgGetIPASN\x10\x82\x04\x12\x1d\n\x18k_EGCMsgGetI\
    PASNResponse\x10\x83\x04\x12\x1e\n\x19k_EGCMsgGetAppFriendsList\x10\x84\
    \x04\x12&\n!k_EGCMsgGetAppFriendsListResponse\x10\x85\x04\x12\"\n\x1dk_E\
    GCMsgVacVerificationChange\x10\x86\x04\x12%\n\x20k_EGCMsgAccountPhoneNum\
    berChange\x10\x87\x04\x12#\n\x1ek_EGCMsgAccountTwoFactorChange\x10\x88\
    \x04\x12\x20\n\x1bk_EGCMsgCheckClanMembership\x10\x89\x04\x12(\n#k_EGCMs\
    gCheckClanMembershipResponse\x10\x8a\x04\x12\x1e\n\x19k_EGCMsgInviteUser\
    ToLobby\x10\x8b\x04\x121\n,k_EGCMsgGetGamePersonalDataCategoriesRequest\
    \x10\x8c\x04\x122\n-k_EGCMsgGetGamePersonalDataCategoriesResponse\x10\
    \x8d\x04\x12.\n)k_EGCMsgGetGamePersonalDataEntriesRequest\x10\x8e\x04\
    \x12/\n*k_EGCMsgGetGamePersonalDataEntriesResponse\x10\x8f\x04\x124\n/k_\
    EGCMsgTerminateGamePersonalDataEntriesRequest\x10\x90\x04\x125\n0k_EGCMs\
    gTerminateGamePersonalDataEntriesResponse\x10\x91\x04*\x95\x02\n\x06ESOM\
    sg\x12\x13\n\x0fk_ESOMsg_Create\x10\x15\x12\x13\n\x0fk_ESOMsg_Update\x10\
    \x16\x12\x14\n\x10k_ESOMsg_Destroy\x10\x17\x12\x1c\n\x18k_ESOMsg_CacheSu\
    bscribed\x10\x18\x12\x1e\n\x1ak_ESOMsg_CacheUnsubscribed\x10\x19\x12\x1b\
    \n\x17k_ESOMsg_UpdateMultiple\x10\x1a\x12#\n\x1fk_ESOMsg_CacheSubscripti\
    onCheck\x10\x1b\x12%\n!k_ESOMsg_CacheSubscriptionRefresh\x10\x1c\x12$\n\
    \x20k_ESOMsg_CacheSubscribedUpToDate\x10\x1d*\xeb\x01\n\x10EGCBaseClient\
    Msg\x12\x18\n\x13k_EMsgGCPingRequest\x10\xb9\x17\x12\x19\n\x14k_EMsgGCPi\
    ngResponse\x10\xba\x17\x12\x1a\n\x15k_EMsgGCClientWelcome\x10\xa4\x1f\
    \x12\x1a\n\x15k_EMsgGCServerWelcome\x10\xa5\x1f\x12\x18\n\x13k_EMsgGCCli\
    entHello\x10\xa6\x1f\x12\x18\n\x13k_EMsgGCServerHello\x10\xa7\x1f\x12\
    \x1a\n\x15k_EMsgGCClientGoodbye\x10\xa8\x1f\x12\x1a\n\x15k_EMsgGCServerG\
    oodbye\x10\xa9\x1f*\xec\x02\n\nEGCToGCMsg\x12\x1a\n\x15k_EGCToGCMsgMaste\
    rAck\x10\x96\x01\x12\"\n\x1dk_EGCToGCMsgMasterAckResponse\x10\x97\x01\
    \x12\x17\n\x12k_EGCToGCMsgRouted\x10\x98\x01\x12\x1c\n\x17k_EGCToGCMsgRo\
    utedReply\x10\x99\x01\x12#\n\x1ek_EMsgGCUpdateSubGCSessionInfo\x10\x9a\
    \x01\x12$\n\x1fk_EMsgGCRequestSubGCSessionInfo\x10\x9b\x01\x12,\n'k_EMsg\
    GCRequestSubGCSessionInfoResponse\x10\x9c\x01\x12&\n!k_EGCToGCMsgMasterS\
    tartupComplete\x10\x9d\x01\x12!\n\x1ck_EMsgGCToGCSOCacheSubscribe\x10\
    \x9e\x01\x12#\n\x1ek_EMsgGCToGCSOCacheUnsubscribe\x10\x9f\x01B\x05H\x01\
    \x80\x01\0J\xe84\n\x07\x12\x05\0\0\xb1\x01\x01\n\x08\n\x01\x08\x12\x03\0\
    \0\x1c\n\t\n\x02\x08\t\x12\x03\0\0\x1c\n\x08\n\x01\x08\x12\x03\x01\0#\n\
    \t\n\x02\x08\x10\x12\x03\x01\0#\n\n\n\x02\x05\0\x12\x04\x03\0h\x01\n\n\n\
    \x03\x05\0\x01\x12\x03\x03\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x04\
    \x08\x1c\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x04\x08\x17\n\x0c\n\x05\x05\
    \0\x02\0\x02\x12\x03\x04\x1a\x1b\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x05\
    \x08\x1a\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x05\x08\x15\n\x0c\n\x05\
    \x05\0\x02\x01\x02\x12\x03\x05\x18\x19\n\x0b\n\x04\x05\0\x02\x02\x12\x03\
    \x06\x08\"\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x06\x08\x1c\n\x0c\n\x05\
    \x05\0\x02\x02\x02\x12\x03\x06\x1f!\n\x0b\n\x04\x05\0\x02\x03\x12\x03\
    \x07\x08\x20\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x07\x08\x1a\n\x0c\n\
    \x05\x05\0\x02\x03\x02\x12\x03\x07\x1d\x1f\n\x0b\n\x04\x05\0\x02\x04\x12\
    \x03\x08\x08(\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x08\x08\"\n\x0c\n\
    \x05\x05\0\x02\x04\x02\x12\x03\x08%'\n\x0b\n\x04\x05\0\x02\x05\x12\x03\t\
    \x08\x20\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\t\x08\x1a\n\x0c\n\x05\x05\
    \0\x02\x05\x02\x12\x03\t\x1d\x1f\n\x0b\n\x04\x05\0\x02\x06\x12\x03\n\x08\
    \"\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\n\x08\x1c\n\x0c\n\x05\x05\0\x02\
    \x06\x02\x12\x03\n\x1f!\n\x0b\n\x04\x05\0\x02\x07\x12\x03\x0b\x08!\n\x0c\
    \n\x05\x05\0\x02\x07\x01\x12\x03\x0b\x08\x1b\n\x0c\n\x05\x05\0\x02\x07\
    \x02\x12\x03\x0b\x1e\x20\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x0c\x08%\n\
    \x0c\n\x05\x05\0\x02\x08\x01\x12\x03\x0c\x08\x1f\n\x0c\n\x05\x05\0\x02\
    \x08\x02\x12\x03\x0c\"$\n\x0b\n\x04\x05\0\x02\t\x12\x03\r\x08$\n\x0c\n\
    \x05\x05\0\x02\t\x01\x12\x03\r\x08\x1e\n\x0c\n\x05\x05\0\x02\t\x02\x12\
    \x03\r!#\n\x0b\n\x04\x05\0\x02\n\x12\x03\x0e\x08\x1f\n\x0c\n\x05\x05\0\
    \x02\n\x01\x12\x03\x0e\x08\x19\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\x0e\
    \x1c\x1e\n\x0b\n\x04\x05\0\x02\x0b\x12\x03\x0f\x08\x20\n\x0c\n\x05\x05\0\
    \x02\x0b\x01\x12\x03\x0f\x08\x1a\n\x0c\n\x05\x05\0\x02\x0b\x02\x12\x03\
    \x0f\x1d\x1f\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x10\x08,\n\x0c\n\x05\x05\
    \0\x02\x0c\x01\x12\x03\x10\x08&\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\x03\
    \x10)+\n\x0b\n\x04\x05\0\x02\r\x12\x03\x11\x084\n\x0c\n\x05\x05\0\x02\r\
    \x01\x12\x03\x11\x08.\n\x0c\n\x05\x05\0\x02\r\x02\x12\x03\x1113\n\x0b\n\
    \x04\x05\0\x02\x0e\x12\x03\x12\x08,\n\x0c\n\x05\x05\0\x02\x0e\x01\x12\
    \x03\x12\x08&\n\x0c\n\x05\x05\0\x02\x0e\x02\x12\x03\x12)+\n\x0b\n\x04\
    \x05\0\x02\x0f\x12\x03\x13\x08*\n\x0c\n\x05\x05\0\x02\x0f\x01\x12\x03\
    \x13\x08$\n\x0c\n\x05\x05\0\x02\x0f\x02\x12\x03\x13')\n\x0b\n\x04\x05\0\
    \x02\x10\x12\x03\x14\x08$\n\x0c\n\x05\x05\0\x02\x10\x01\x12\x03\x14\x08\
    \x1e\n\x0c\n\x05\x05\0\x02\x10\x02\x12\x03\x14!#\n\x0b\n\x04\x05\0\x02\
    \x11\x12\x03\x15\x08%\n\x0c\n\x05\x05\0\x02\x11\x01\x12\x03\x15\x08\x1f\
    \n\x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x15\"$\n\x0b\n\x04\x05\0\x02\x12\
    \x12\x03\x16\x08-\n\x0c\n\x05\x05\0\x02\x12\x01\x12\x03\x16\x08'\n\x0c\n\
    \x05\x05\0\x02\x12\x02\x12\x03\x16*,\n\x0b\n\x04\x05\0\x02\x13\x12\x03\
    \x17\x08,\n\x0c\n\x05\x05\0\x02\x13\x01\x12\x03\x17\x08&\n\x0c\n\x05\x05\
    \0\x02\x13\x02\x12\x03\x17)+\n\x0b\n\x04\x05\0\x02\x14\x12\x03\x18\x08%\
    \n\x0c\n\x05\x05\0\x02\x14\x01\x12\x03\x18\x08\x1f\n\x0c\n\x05\x05\0\x02\
    \x14\x02\x12\x03\x18\"$\n\x0b\n\x04\x05\0\x02\x15\x12\x03\x19\x08-\n\x0c\
    \n\x05\x05\0\x02\x15\x01\x12\x03\x19\x08'\n\x0c\n\x05\x05\0\x02\x15\x02\
    \x12\x03\x19*,\n\x0b\n\x04\x05\0\x02\x16\x12\x03\x1a\x08\"\n\x0c\n\x05\
    \x05\0\x02\x16\x01\x12\x03\x1a\x08\x1c\n\x0c\n\x05\x05\0\x02\x16\x02\x12\
    \x03\x1a\x1f!\n\x0b\n\x04\x05\0\x02\x17\x12\x03\x1b\x08)\n\x0c\n\x05\x05\
    \0\x02\x17\x01\x12\x03\x1b\x08#\n\x0c\n\x05\x05\0\x02\x17\x02\x12\x03\
    \x1b&(\n\x0b\n\x04\x05\0\x02\x18\x12\x03\x1c\x082\n\x0c\n\x05\x05\0\x02\
    \x18\x01\x12\x03\x1c\x08,\n\x0c\n\x05\x05\0\x02\x18\x02\x12\x03\x1c/1\n\
    \x0b\n\x04\x05\0\x02\x19\x12\x03\x1d\x08,\n\x0c\n\x05\x05\0\x02\x19\x01\
    \x12\x03\x1d\x08&\n\x0c\n\x05\x05\0\x02\x19\x02\x12\x03\x1d)+\n\x0b\n\
    \x04\x05\0\x02\x1a\x12\x03\x1e\x08\"\n\x0c\n\x05\x05\0\x02\x1a\x01\x12\
    \x03\x1e\x08\x1c\n\x0c\n\x05\x05\0\x02\x1a\x02\x12\x03\x1e\x1f!\n\x0b\n\
    \x04\x05\0\x02\x1b\x12\x03\x1f\x08\x1f\n\x0c\n\x05\x05\0\x02\x1b\x01\x12\
    \x03\x1f\x08\x19\n\x0c\n\x05\x05\0\x02\x1b\x02\x12\x03\x1f\x1c\x1e\n\x0b\
    \n\x04\x05\0\x02\x1c\x12\x03\x20\x08!\n\x0c\n\x05\x05\0\x02\x1c\x01\x12\
    \x03\x20\x08\x1b\n\x0c\n\x05\x05\0\x02\x1c\x02\x12\x03\x20\x1e\x20\n\x0b\
    \n\x04\x05\0\x02\x1d\x12\x03!\x08\"\n\x0c\n\x05\x05\0\x02\x1d\x01\x12\
    \x03!\x08\x1c\n\x0c\n\x05\x05\0\x02\x1d\x02\x12\x03!\x1f!\n\x0b\n\x04\
    \x05\0\x02\x1e\x12\x03\"\x08!\n\x0c\n\x05\x05\0\x02\x1e\x01\x12\x03\"\
    \x08\x1b\n\x0c\n\x05\x05\0\x02\x1e\x02\x12\x03\"\x1e\x20\n\x0b\n\x04\x05\
    \0\x02\x1f\x12\x03#\x08)\n\x0c\n\x05\x05\0\x02\x1f\x01\x12\x03#\x08#\n\
    \x0c\n\x05\x05\0\x02\x1f\x02\x12\x03#&(\n\x0b\n\x04\x05\0\x02\x20\x12\
    \x03$\x08$\n\x0c\n\x05\x05\0\x02\x20\x01\x12\x03$\x08\x1e\n\x0c\n\x05\
    \x05\0\x02\x20\x02\x12\x03$!#\n\x0b\n\x04\x05\0\x02!\x12\x03%\x08,\n\x0c\
    \n\x05\x05\0\x02!\x01\x12\x03%\x08&\n\x0c\n\x05\x05\0\x02!\x02\x12\x03%)\
    +\n\x0b\n\x04\x05\0\x02\"\x12\x03&\x08#\n\x0c\n\x05\x05\0\x02\"\x01\x12\
    \x03&\x08\x1d\n\x0c\n\x05\x05\0\x02\"\x02\x12\x03&\x20\"\n\x0b\n\x04\x05\
    \0\x02#\x12\x03'\x08+\n\x0c\n\x05\x05\0\x02#\x01\x12\x03'\x08%\n\x0c\n\
    \x05\x05\0\x02#\x02\x12\x03'(*\n\x0b\n\x04\x05\0\x02$\x12\x03(\x08'\n\
    \x0c\n\x05\x05\0\x02$\x01\x12\x03(\x08!\n\x0c\n\x05\x05\0\x02$\x02\x12\
    \x03($&\n\x0b\n\x04\x05\0\x02%\x12\x03)\x08$\n\x0c\n\x05\x05\0\x02%\x01\
    \x12\x03)\x08\x1e\n\x0c\n\x05\x05\0\x02%\x02\x12\x03)!#\n\x0b\n\x04\x05\
    \0\x02&\x12\x03*\x08,\n\x0c\n\x05\x05\0\x02&\x01\x12\x03*\x08&\n\x0c\n\
    \x05\x05\0\x02&\x02\x12\x03*)+\n\x0b\n\x04\x05\0\x02'\x12\x03+\x08\x1f\n\
    \x0c\n\x05\x05\0\x02'\x01\x12\x03+\x08\x19\n\x0c\n\x05\x05\0\x02'\x02\
    \x12\x03+\x1c\x1e\n\x0b\n\x04\x05\0\x02(\x12\x03,\x08'\n\x0c\n\x05\x05\0\
    \x02(\x01\x12\x03,\x08!\n\x0c\n\x05\x05\0\x02(\x02\x12\x03,$&\n\x0b\n\
    \x04\x05\0\x02)\x12\x03-\x08&\n\x0c\n\x05\x05\0\x02)\x01\x12\x03-\x08\
    \x20\n\x0c\n\x05\x05\0\x02)\x02\x12\x03-#%\n\x0b\n\x04\x05\0\x02*\x12\
    \x03.\x08.\n\x0c\n\x05\x05\0\x02*\x01\x12\x03.\x08(\n\x0c\n\x05\x05\0\
    \x02*\x02\x12\x03.+-\n\x0b\n\x04\x05\0\x02+\x12\x03/\x08$\n\x0c\n\x05\
    \x05\0\x02+\x01\x12\x03/\x08\x1e\n\x0c\n\x05\x05\0\x02+\x02\x12\x03/!#\n\
    \x0b\n\x04\x05\0\x02,\x12\x030\x08,\n\x0c\n\x05\x05\0\x02,\x01\x12\x030\
    \x08&\n\x0c\n\x05\x05\0\x02,\x02\x12\x030)+\n\x0b\n\x04\x05\0\x02-\x12\
    \x031\x08'\n\x0c\n\x05\x05\0\x02-\x01\x12\x031\x08!\n\x0c\n\x05\x05\0\
    \x02-\x02\x12\x031$&\n\x0b\n\x04\x05\0\x02.\x12\x032\x08/\n\x0c\n\x05\
    \x05\0\x02.\x01\x12\x032\x08)\n\x0c\n\x05\x05\0\x02.\x02\x12\x032,.\n\
    \x0b\n\x04\x05\0\x02/\x12\x033\x08%\n\x0c\n\x05\x05\0\x02/\x01\x12\x033\
    \x08\x1f\n\x0c\n\x05\x05\0\x02/\x02\x12\x033\"$\n\x0b\n\x04\x05\0\x020\
    \x12\x034\x08-\n\x0c\n\x05\x05\0\x020\x01\x12\x034\x08'\n\x0c\n\x05\x05\
    \0\x020\x02\x12\x034*,\n\x0b\n\x04\x05\0\x021\x12\x035\x08\"\n\x0c\n\x05\
    \x05\0\x021\x01\x12\x035\x08\x1c\n\x0c\n\x05\x05\0\x021\x02\x12\x035\x1f\
    !\n\x0b\n\x04\x05\0\x022\x12\x036\x08/\n\x0c\n\x05\x05\0\x022\x01\x12\
    \x036\x08(\n\x0c\n\x05\x05\0\x022\x02\x12\x036+.\n\x0b\n\x04\x05\0\x023\
    \x12\x037\x08'\n\x0c\n\x05\x05\0\x023\x01\x12\x037\x08\x20\n\x0c\n\x05\
    \x05\0\x023\x02\x12\x037#&\n\x0b\n\x04\x05\0\x024\x12\x038\x083\n\x0c\n\
    \x05\x05\0\x024\x01\x12\x038\x08,\n\x0c\n\x05\x05\0\x024\x02\x12\x038/2\
    \n\x0b\n\x04\x05\0\x025\x12\x039\x086\n\x0c\n\x05\x05\0\x025\x01\x12\x03\
    9\x08/\n\x0c\n\x05\x05\0\x025\x02\x12\x03925\n\x0b\n\x04\x05\0\x026\x12\
    \x03:\x08#\n\x0c\n\x05\x05\0\x026\x01\x12\x03:\x08\x1c\n\x0c\n\x05\x05\0\
    \x026\x02\x12\x03:\x1f\"\n\x0b\n\x04\x05\0\x027\x12\x03;\x08+\n\x0c\n\
    \x05\x05\0\x027\x01\x12\x03;\x08$\n\x0c\n\x05\x05\0\x027\x02\x12\x03;'*\
    \n\x0b\n\x04\x05\0\x028\x12\x03<\x08#\n\x0c\n\x05\x05\0\x028\x01\x12\x03\
    <\x08\x1c\n\x0c\n\x05\x05\0\x028\x02\x12\x03<\x1f\"\n\x0b\n\x04\x05\0\
    \x029\x12\x03=\x08&\n\x0c\n\x05\x05\0\x029\x01\x12\x03=\x08\x1f\n\x0c\n\
    \x05\x05\0\x029\x02\x12\x03=\"%\n\x0b\n\x04\x05\0\x02:\x12\x03>\x08%\n\
    \x0c\n\x05\x05\0\x02:\x01\x12\x03>\x08\x1e\n\x0c\n\x05\x05\0\x02:\x02\
    \x12\x03>!$\n\x0b\n\x04\x05\0\x02;\x12\x03?\x08-\n\x0c\n\x05\x05\0\x02;\
    \x01\x12\x03?\x08&\n\x0c\n\x05\x05\0\x02;\x02\x12\x03?),\n\x0b\n\x04\x05\
    \0\x02<\x12\x03@\x08\x1f\n\x0c\n\x05\x05\0\x02<\x01\x12\x03@\x08\x18\n\
    \x0c\n\x05\x05\0\x02<\x02\x12\x03@\x1b\x1e\n\x0b\n\x04\x05\0\x02=\x12\
    \x03A\x08'\n\x0c\n\x05\x05\0\x02=\x01\x12\x03A\x08\x20\n\x0c\n\x05\x05\0\
    \x02=\x02\x12\x03A#&\n\x0b\n\x04\x05\0\x02>\x12\x03B\x08)\n\x0c\n\x05\
    \x05\0\x02>\x01\x12\x03B\x08\"\n\x0c\n\x05\x05\0\x02>\x02\x12\x03B%(\n\
    \x0b\n\x04\x05\0\x02?\x12\x03C\x081\n\x0c\n\x05\x05\0\x02?\x01\x12\x03C\
    \x08*\n\x0c\n\x05\x05\0\x02?\x02\x12\x03C-0\n\x0b\n\x04\x05\0\x02@\x12\
    \x03D\x08-\n\x0c\n\x05\x05\0\x02@\x01\x12\x03D\x08&\n\x0c\n\x05\x05\0\
    \x02@\x02\x12\x03D),\n\x0b\n\x04\x05\0\x02A\x12\x03E\x085\n\x0c\n\x05\
    \x05\0\x02A\x01\x12\x03E\x08.\n\x0c\n\x05\x05\0\x02A\x02\x12\x03E14\n\
    \x0b\n\x04\x05\0\x02B\x12\x03F\x080\n\x0c\n\x05\x05\0\x02B\x01\x12\x03F\
    \x08)\n\x0c\n\x05\x05\0\x02B\x02\x12\x03F,/\n\x0b\n\x04\x05\0\x02C\x12\
    \x03G\x088\n\x0c\n\x05\x05\0\x02C\x01\x12\x03G\x081\n\x0c\n\x05\x05\0\
    \x02C\x02\x12\x03G47\n\x0b\n\x04\x05\0\x02D\x12\x03H\x08!\n\x0c\n\x05\
    \x05\0\x02D\x01\x12\x03H\x08\x1a\n\x0c\n\x05\x05\0\x02D\x02\x12\x03H\x1d\
    \x20\n\x0b\n\x04\x05\0\x02E\x12\x03I\x08)\n\x0c\n\x05\x05\0\x02E\x01\x12\
    \x03I\x08\"\n\x0c\n\x05\x05\0\x02E\x02\x12\x03I%(\n\x0b\n\x04\x05\0\x02F\
    \x12\x03J\x08\"\n\x0c\n\x05\x05\0\x02F\x01\x12\x03J\x08\x1b\n\x0c\n\x05\
    \x05\0\x02F\x02\x12\x03J\x1e!\n\x0b\n\x04\x05\0\x02G\x12\x03K\x08-\n\x0c\
    \n\x05\x05\0\x02G\x01\x12\x03K\x08&\n\x0c\n\x05\x05\0\x02G\x02\x12\x03K)\
    ,\n\x0b\n\x04\x05\0\x02H\x12\x03L\x085\n\x0c\n\x05\x05\0\x02H\x01\x12\
    \x03L\x08.\n\x0c\n\x05\x05\0\x02H\x02\x12\x03L14\n\x0b\n\x04\x05\0\x02I\
    \x12\x03M\x08$\n\x0c\n\x05\x05\0\x02I\x01\x12\x03M\x08\x1d\n\x0c\n\x05\
    \x05\0\x02I\x02\x12\x03M\x20#\n\x0b\n\x04\x05\0\x02J\x12\x03N\x08/\n\x0c\
    \n\x05\x05\0\x02J\x01\x12\x03N\x08(\n\x0c\n\x05\x05\0\x02J\x02\x12\x03N+\
    .\n\x0b\n\x04\x05\0\x02K\x12\x03O\x08&\n\x0c\n\x05\x05\0\x02K\x01\x12\
    \x03O\x08\x1f\n\x0c\n\x05\x05\0\x02K\x02\x12\x03O\"%\n\x0b\n\x04\x05\0\
    \x02L\x12\x03P\x08.\n\x0c\n\x05\x05\0\x02L\x01\x12\x03P\x08'\n\x0c\n\x05\
    \x05\0\x02L\x02\x12\x03P*-\n\x0b\n\x04\x05\0\x02M\x12\x03Q\x08,\n\x0c\n\
    \x05\x05\0\x02M\x01\x12\x03Q\x08%\n\x0c\n\x05\x05\0\x02M\x02\x12\x03Q(+\
    \n\x0b\n\x04\x05\0\x02N\x12\x03R\x084\n\x0c\n\x05\x05\0\x02N\x01\x12\x03\
    R\x08-\n\x0c\n\x05\x05\0\x02N\x02\x12\x03R03\n\x0b\n\x04\x05\0\x02O\x12\
    \x03S\x083\n\x0c\n\x05\x05\0\x02O\x01\x12\x03S\x08,\n\x0c\n\x05\x05\0\
    \x02O\x02\x12\x03S/2\n\x0b\n\x04\x05\0\x02P\x12\x03T\x082\n\x0c\n\x05\
    \x05\0\x02P\x01\x12\x03T\x08+\n\x0c\n\x05\x05\0\x02P\x02\x12\x03T.1\n\
    \x0b\n\x04\x05\0\x02Q\x12\x03U\x08.\n\x0c\n\x05\x05\0\x02Q\x01\x12\x03U\
    \x08'\n\x0c\n\x05\x05\0\x02Q\x02\x12\x03U*-\n\x0b\n\x04\x05\0\x02R\x12\
    \x03V\x08)\n\x0c\n\x05\x05\0\x02R\x01\x12\x03V\x08\"\n\x0c\n\x05\x05\0\
    \x02R\x02\x12\x03V%(\n\x0b\n\x04\x05\0\x02S\x12\x03W\x081\n\x0c\n\x05\
    \x05\0\x02S\x01\x12\x03W\x08*\n\x0c\n\x05\x05\0\x02S\x02\x12\x03W-0\n\
    \x0b\n\x04\x05\0\x02T\x12\x03X\x08\x1f\n\x0c\n\x05\x05\0\x02T\x01\x12\
    \x03X\x08\x18\n\x0c\n\x05\x05\0\x02T\x02\x12\x03X\x1b\x1e\n\x0b\n\x04\
    \x05\0\x02U\x12\x03Y\x08'\n\x0c\n\x05\x05\0\x02U\x01\x12\x03Y\x08\x20\n\
    \x0c\n\x05\x05\0\x02U\x02\x12\x03Y#&\n\x0b\n\x04\x05\0\x02V\x12\x03Z\x08\
    (\n\x0c\n\x05\x05\0\x02V\x01\x12\x03Z\x08!\n\x0c\n\x05\x05\0\x02V\x02\
    \x12\x03Z$'\n\x0b\n\x04\x05\0\x02W\x12\x03[\x080\n\x0c\n\x05\x05\0\x02W\
    \x01\x12\x03[\x08)\n\x0c\n\x05\x05\0\x02W\x02\x12\x03[,/\n\x0b\n\x04\x05\
    \0\x02X\x12\x03\\\x08,\n\x0c\n\x05\x05\0\x02X\x01\x12\x03\\\x08%\n\x0c\n\
    \x05\x05\0\x02X\x02\x12\x03\\(+\n\x0b\n\x04\x05\0\x02Y\x12\x03]\x08/\n\
    \x0c\n\x05\x05\0\x02Y\x01\x12\x03]\x08(\n\x0c\n\x05\x05\0\x02Y\x02\x12\
    \x03]+.\n\x0b\n\x04\x05\0\x02Z\x12\x03^\x08-\n\x0c\n\x05\x05\0\x02Z\x01\
    \x12\x03^\x08&\n\x0c\n\x05\x05\0\x02Z\x02\x12\x03^),\n\x0b\n\x04\x05\0\
    \x02[\x12\x03_\x08*\n\x0c\n\x05\x05\0\x02[\x01\x12\x03_\x08#\n\x0c\n\x05\
    \x05\0\x02[\x02\x12\x03_&)\n\x0b\n\x04\x05\0\x02\\\x12\x03`\x082\n\x0c\n\
    \x05\x05\0\x02\\\x01\x12\x03`\x08+\n\x0c\n\x05\x05\0\x02\\\x02\x12\x03`.\
    1\n\x0b\n\x04\x05\0\x02]\x12\x03a\x08(\n\x0c\n\x05\x05\0\x02]\x01\x12\
    \x03a\x08!\n\x0c\n\x05\x05\0\x02]\x02\x12\x03a$'\n\x0b\n\x04\x05\0\x02^\
    \x12\x03b\x08;\n\x0c\n\x05\x05\0\x02^\x01\x12\x03b\x084\n\x0c\n\x05\x05\
    \0\x02^\x02\x12\x03b7:\n\x0b\n\x04\x05\0\x02_\x12\x03c\x08<\n\x0c\n\x05\
    \x05\0\x02_\x01\x12\x03c\x085\n\x0c\n\x05\x05\0\x02_\x02\x12\x03c8;\n\
    \x0b\n\x04\x05\0\x02`\x12\x03d\x088\n\x0c\n\x05\x05\0\x02`\x01\x12\x03d\
    \x081\n\x0c\n\x05\x05\0\x02`\x02\x12\x03d47\n\x0b\n\x04\x05\0\x02a\x12\
    \x03e\x089\n\x0c\n\x05\x05\0\x02a\x01\x12\x03e\x082\n\x0c\n\x05\x05\0\
    \x02a\x02\x12\x03e58\n\x0b\n\x04\x05\0\x02b\x12\x03f\x08>\n\x0c\n\x05\
    \x05\0\x02b\x01\x12\x03f\x087\n\x0c\n\x05\x05\0\x02b\x02\x12\x03f:=\n\
    \x0b\n\x04\x05\0\x02c\x12\x03g\x08?\n\x0c\n\x05\x05\0\x02c\x01\x12\x03g\
    \x088\n\x0c\n\x05\x05\0\x02c\x02\x12\x03g;>\n\n\n\x02\x05\x01\x12\x04j\0\
    t\x01\n\n\n\x03\x05\x01\x01\x12\x03j\x05\x0b\n\x0b\n\x04\x05\x01\x02\0\
    \x12\x03k\x08\x1d\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03k\x08\x17\n\x0c\n\
    \x05\x05\x01\x02\0\x02\x12\x03k\x1a\x1c\n\x0b\n\x04\x05\x01\x02\x01\x12\
    \x03l\x08\x1d\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03l\x08\x17\n\x0c\n\
    \x05\x05\x01\x02\x01\x02\x12\x03l\x1a\x1c\n\x0b\n\x04\x05\x01\x02\x02\
    \x12\x03m\x08\x1e\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03m\x08\x18\n\x0c\
    \n\x05\x05\x01\x02\x02\x02\x12\x03m\x1b\x1d\n\x0b\n\x04\x05\x01\x02\x03\
    \x12\x03n\x08&\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03n\x08\x20\n\x0c\n\
    \x05\x05\x01\x02\x03\x02\x12\x03n#%\n\x0b\n\x04\x05\x01\x02\x04\x12\x03o\
    \x08(\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03o\x08\"\n\x0c\n\x05\x05\x01\
    \x02\x04\x02\x12\x03o%'\n\x0b\n\x04\x05\x01\x02\x05\x12\x03p\x08%\n\x0c\
    \n\x05\x05\x01\x02\x05\x01\x12\x03p\x08\x1f\n\x0c\n\x05\x05\x01\x02\x05\
    \x02\x12\x03p\"$\n\x0b\n\x04\x05\x01\x02\x06\x12\x03q\x08-\n\x0c\n\x05\
    \x05\x01\x02\x06\x01\x12\x03q\x08'\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\
    \x03q*,\n\x0b\n\x04\x05\x01\x02\x07\x12\x03r\x08/\n\x0c\n\x05\x05\x01\
    \x02\x07\x01\x12\x03r\x08)\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x03r,.\n\
    \x0b\n\x04\x05\x01\x02\x08\x12\x03s\x08.\n\x0c\n\x05\x05\x01\x02\x08\x01\
    \x12\x03s\x08(\n\x0c\n\x05\x05\x01\x02\x08\x02\x12\x03s+-\n\n\n\x02\x05\
    \x02\x12\x04v\0\x7f\x01\n\n\n\x03\x05\x02\x01\x12\x03v\x05\x15\n\x0b\n\
    \x04\x05\x02\x02\0\x12\x03w\x08#\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03w\
    \x08\x1b\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03w\x1e\"\n\x0b\n\x04\x05\
    \x02\x02\x01\x12\x03x\x08$\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03x\x08\
    \x1c\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03x\x1f#\n\x0b\n\x04\x05\x02\
    \x02\x02\x12\x03y\x08%\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03y\x08\x1d\
    \n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03y\x20$\n\x0b\n\x04\x05\x02\x02\
    \x03\x12\x03z\x08%\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03z\x08\x1d\n\
    \x0c\n\x05\x05\x02\x02\x03\x02\x12\x03z\x20$\n\x0b\n\x04\x05\x02\x02\x04\
    \x12\x03{\x08#\n\x0c\n\x05\x05\x02\x02\x04\x01\x12\x03{\x08\x1b\n\x0c\n\
    \x05\x05\x02\x02\x04\x02\x12\x03{\x1e\"\n\x0b\n\x04\x05\x02\x02\x05\x12\
    \x03|\x08#\n\x0c\n\x05\x05\x02\x02\x05\x01\x12\x03|\x08\x1b\n\x0c\n\x05\
    \x05\x02\x02\x05\x02\x12\x03|\x1e\"\n\x0b\n\x04\x05\x02\x02\x06\x12\x03}\
    \x08%\n\x0c\n\x05\x05\x02\x02\x06\x01\x12\x03}\x08\x1d\n\x0c\n\x05\x05\
    \x02\x02\x06\x02\x12\x03}\x20$\n\x0b\n\x04\x05\x02\x02\x07\x12\x03~\x08%\
    \n\x0c\n\x05\x05\x02\x02\x07\x01\x12\x03~\x08\x1d\n\x0c\n\x05\x05\x02\
    \x02\x07\x02\x12\x03~\x20$\n\x0c\n\x02\x05\x03\x12\x06\x81\x01\0\x8c\x01\
    \x01\n\x0b\n\x03\x05\x03\x01\x12\x04\x81\x01\x05\x0f\n\x0c\n\x04\x05\x03\
    \x02\0\x12\x04\x82\x01\x08$\n\r\n\x05\x05\x03\x02\0\x01\x12\x04\x82\x01\
    \x08\x1d\n\r\n\x05\x05\x03\x02\0\x02\x12\x04\x82\x01\x20#\n\x0c\n\x04\
    \x05\x03\x02\x01\x12\x04\x83\x01\x08,\n\r\n\x05\x05\x03\x02\x01\x01\x12\
    \x04\x83\x01\x08%\n\r\n\x05\x05\x03\x02\x01\x02\x12\x04\x83\x01(+\n\x0c\
    \n\x04\x05\x03\x02\x02\x12\x04\x84\x01\x08!\n\r\n\x05\x05\x03\x02\x02\
    \x01\x12\x04\x84\x01\x08\x1a\n\r\n\x05\x05\x03\x02\x02\x02\x12\x04\x84\
    \x01\x1d\x20\n\x0c\n\x04\x05\x03\x02\x03\x12\x04\x85\x01\x08&\n\r\n\x05\
    \x05\x03\x02\x03\x01\x12\x04\x85\x01\x08\x1f\n\r\n\x05\x05\x03\x02\x03\
    \x02\x12\x04\x85\x01\"%\n\x0c\n\x04\x05\x03\x02\x04\x12\x04\x86\x01\x08-\
    \n\r\n\x05\x05\x03\x02\x04\x01\x12\x04\x86\x01\x08&\n\r\n\x05\x05\x03\
    \x02\x04\x02\x12\x04\x86\x01),\n\x0c\n\x04\x05\x03\x02\x05\x12\x04\x87\
    \x01\x08.\n\r\n\x05\x05\x03\x02\x05\x01\x12\x04\x87\x01\x08'\n\r\n\x05\
    \x05\x03\x02\x05\x02\x12\x04\x87\x01*-\n\x0c\n\x04\x05\x03\x02\x06\x12\
    \x04\x88\x01\x086\n\r\n\x05\x05\x03\x02\x06\x01\x12\x04\x88\x01\x08/\n\r\
    \n\x05\x05\x03\x02\x06\x02\x12\x04\x88\x0125\n\x0c\n\x04\x05\x03\x02\x07\
    \x12\x04\x89\x01\x080\n\r\n\x05\x05\x03\x02\x07\x01\x12\x04\x89\x01\x08)\
    \n\r\n\x05\x05\x03\x02\x07\x02\x12\x04\x89\x01,/\n\x0c\n\x04\x05\x03\x02\
    \x08\x12\x04\x8a\x01\x08+\n\r\n\x05\x05\x03\x02\x08\x01\x12\x04\x8a\x01\
    \x08$\n\r\n\x05\x05\x03\x02\x08\x02\x12\x04\x8a\x01'*\n\x0c\n\x04\x05\
    \x03\x02\t\x12\x04\x8b\x01\x08-\n\r\n\x05\x05\x03\x02\t\x01\x12\x04\x8b\
    \x01\x08&\n\r\n\x05\x05\x03\x02\t\x02\x12\x04\x8b\x01),\n\x0c\n\x02\x04\
    \0\x12\x06\x8e\x01\0\x92\x01\x01\n\x0b\n\x03\x04\0\x01\x12\x04\x8e\x01\
    \x08/\n\x0c\n\x04\x04\0\x02\0\x12\x04\x8f\x01\x08!\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x8f\x01\x08\x10\n\r\n\x05\x04\0\x02\0\x05\x12\x04\x8f\x01\
    \x11\x17\n\r\n\x05\x04\0\x02\0\x01\x12\x04\x8f\x01\x18\x1c\n\r\n\x05\x04\
    \0\x02\0\x03\x12\x04\x8f\x01\x1f\x20\n\x0c\n\x04\x04\0\x02\x01\x12\x04\
    \x90\x01\x08/\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x90\x01\x08\x10\n\r\n\
    \x05\x04\0\x02\x01\x05\x12\x04\x90\x01\x11\x17\n\r\n\x05\x04\0\x02\x01\
    \x01\x12\x04\x90\x01\x18*\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\x90\x01-.\
    \n\x0c\n\x04\x04\0\x02\x02\x12\x04\x91\x01\x08*\n\r\n\x05\x04\0\x02\x02\
    \x04\x12\x04\x91\x01\x08\x10\n\r\n\x05\x04\0\x02\x02\x05\x12\x04\x91\x01\
    \x11\x17\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\x91\x01\x18%\n\r\n\x05\x04\
    \0\x02\x02\x03\x12\x04\x91\x01()\n\x0c\n\x02\x04\x01\x12\x06\x94\x01\0\
    \x96\x01\x01\n\x0b\n\x03\x04\x01\x01\x12\x04\x94\x01\x088\n\x0c\n\x04\
    \x04\x01\x02\0\x12\x04\x95\x01\x08\"\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\
    \x95\x01\x08\x10\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\x95\x01\x11\x17\n\r\
    \n\x05\x04\x01\x02\0\x01\x12\x04\x95\x01\x18\x1d\n\r\n\x05\x04\x01\x02\0\
    \x03\x12\x04\x95\x01\x20!\n\x0c\n\x02\x04\x02\x12\x06\x98\x01\0\x9b\x01\
    \x01\n\x0b\n\x03\x04\x02\x01\x12\x04\x98\x01\x089\n\x0c\n\x04\x04\x02\
    \x02\0\x12\x04\x99\x01\x08I\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x99\x01\
    \x08\x10\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\x99\x01\x119\n\r\n\x05\x04\
    \x02\x02\0\x01\x12\x04\x99\x01:D\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x99\
    \x01GH\n\x0c\n\x04\x04\x02\x02\x01\x12\x04\x9a\x01\x080\n\r\n\x05\x04\
    \x02\x02\x01\x04\x12\x04\x9a\x01\x08\x10\n\r\n\x05\x04\x02\x02\x01\x05\
    \x12\x04\x9a\x01\x11\x17\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x9a\x01\
    \x18+\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\x9a\x01./\n\x0c\n\x02\x04\
    \x03\x12\x06\x9d\x01\0\xa2\x01\x01\n\x0b\n\x03\x04\x03\x01\x12\x04\x9d\
    \x01\x085\n\x0c\n\x04\x04\x03\x02\0\x12\x04\x9e\x01\x08\"\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04\x9e\x01\x08\x10\n\r\n\x05\x04\x03\x02\0\x05\x12\
    \x04\x9e\x01\x11\x17\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x9e\x01\x18\x1d\
    \n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x9e\x01\x20!\n\x0c\n\x04\x04\x03\
    \x02\x01\x12\x04\x9f\x01\x08$\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x9f\
    \x01\x08\x10\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x9f\x01\x11\x17\n\r\n\
    \x05\x04\x03\x02\x01\x01\x12\x04\x9f\x01\x18\x1f\n\r\n\x05\x04\x03\x02\
    \x01\x03\x12\x04\x9f\x01\"#\n\x0c\n\x04\x04\x03\x02\x02\x12\x04\xa0\x01\
    \x08!\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\xa0\x01\x08\x10\n\r\n\x05\
    \x04\x03\x02\x02\x05\x12\x04\xa0\x01\x11\x17\n\r\n\x05\x04\x03\x02\x02\
    \x01\x12\x04\xa0\x01\x18\x1c\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xa0\
    \x01\x1f\x20\n\x0c\n\x04\x04\x03\x02\x03\x12\x04\xa1\x01\x08+\n\r\n\x05\
    \x04\x03\x02\x03\x04\x12\x04\xa1\x01\x08\x10\n\r\n\x05\x04\x03\x02\x03\
    \x05\x12\x04\xa1\x01\x11\x17\n\r\n\x05\x04\x03\x02\x03\x01\x12\x04\xa1\
    \x01\x18&\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\xa1\x01)*\n\x0c\n\x02\
    \x04\x04\x12\x06\xa4\x01\0\xa8\x01\x01\n\x0b\n\x03\x04\x04\x01\x12\x04\
    \xa4\x01\x086\n\x0c\n\x04\x04\x04\x02\0\x12\x04\xa5\x01\x08&\n\r\n\x05\
    \x04\x04\x02\0\x04\x12\x04\xa5\x01\x08\x10\n\r\n\x05\x04\x04\x02\0\x05\
    \x12\x04\xa5\x01\x11\x17\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xa5\x01\x18\
    !\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xa5\x01$%\n\x0c\n\x04\x04\x04\x02\
    \x01\x12\x04\xa6\x01\x08$\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04\xa6\x01\
    \x08\x10\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\xa6\x01\x11\x17\n\r\n\x05\
    \x04\x04\x02\x01\x01\x12\x04\xa6\x01\x18\x1f\n\r\n\x05\x04\x04\x02\x01\
    \x03\x12\x04\xa6\x01\"#\n\x0c\n\x04\x04\x04\x02\x02\x12\x04\xa7\x01\x08+\
    \n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\xa7\x01\x08\x10\n\r\n\x05\x04\x04\
    \x02\x02\x05\x12\x04\xa7\x01\x11\x17\n\r\n\x05\x04\x04\x02\x02\x01\x12\
    \x04\xa7\x01\x18&\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xa7\x01)*\n\x0c\
    \n\x02\x04\x05\x12\x06\xaa\x01\0\xad\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\
    \x04\xaa\x01\x08;\n\x0c\n\x04\x04\x05\x02\0\x12\x04\xab\x01\x08\"\n\r\n\
    \x05\x04\x05\x02\0\x04\x12\x04\xab\x01\x08\x10\n\r\n\x05\x04\x05\x02\0\
    \x05\x12\x04\xab\x01\x11\x17\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xab\x01\
    \x18\x1d\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xab\x01\x20!\n\x0c\n\x04\
    \x04\x05\x02\x01\x12\x04\xac\x01\x08$\n\r\n\x05\x04\x05\x02\x01\x04\x12\
    \x04\xac\x01\x08\x10\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xac\x01\x11\
    \x17\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xac\x01\x18\x1f\n\r\n\x05\x04\
    \x05\x02\x01\x03\x12\x04\xac\x01\"#\n\x0c\n\x02\x04\x06\x12\x06\xaf\x01\
    \0\xb1\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\xaf\x01\x08<\n\x0c\n\x04\
    \x04\x06\x02\0\x12\x04\xb0\x01\x08&\n\r\n\x05\x04\x06\x02\0\x04\x12\x04\
    \xb0\x01\x08\x10\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xb0\x01\x11\x17\n\r\
    \n\x05\x04\x06\x02\0\x01\x12\x04\xb0\x01\x18!\n\r\n\x05\x04\x06\x02\0\
    \x03\x12\x04\xb0\x01$%\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
